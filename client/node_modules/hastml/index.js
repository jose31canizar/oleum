'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (html, callback) {
  if (typeof callback !== 'function') {
    throw new Error('A callback is required!');
  }

  // Stack for keeping track of SGML fragments encountered
  var stack = [];

  // We piggyback on `replace`, which means you can walk the tree and replace
  // stuff within it, but you don't have to!
  return html.replace(/(<(?:!--|\/?([^\s/>]*))|\/>|(?:--)?>)/gi, function (match, tagFragment, tagName, offset, string) {
    // This callback is called for every "tag fragment" encountered.
    // This doesn't guarantee the SGML is valid, compliant, or even useful,
    // but it's simple and permissive enough to let you build smarter things
    // atop it.

    // If we have a tag name, this is an opening tag and we want to strip the
    // name from the fragment
    if (tagName) {
      tagFragment = tagFragment.replace(tagName, '');
    }

    var thisTag = void 0;
    var lastTag = stack[stack.length - 1] || {};
    var shouldPopStack = false;

    // Based upon the first one to four characters of the match, we know
    // certain different things are happening
    switch (tagFragment) {
      case '<':
      case '<!--':
        // A tag or comment is opening, push an object onto the tagstack
        thisTag = {
          tagName: tagName,
          state: 'open',
          openIndex: offset
        };

        stack.push(thisTag);
        break;

      case '>':
        // A non-void element tag is either beginning content, or closing
        switch (lastTag.state) {
          case 'open':
            lastTag.contentIndex = offset;
            lastTag.state = 'content';
            break;
          case 'closing':
            lastTag.closeIndex = offset;
            shouldPopStack = true;
            break;
        }

        break;

      case '/>':
      case '-->':
        // A void element or comment tag is closing
        lastTag.closeIndex = offset;
        shouldPopStack = true;
        break;

      case '</':
        // A non-void element tag's closing tag is beginning
        lastTag.closingIndex = offset;
        lastTag.state = 'closing';
        break;
    }

    // We call back, supplying the arguments suppled to String.replace's
    // callback, as well as some of our own stuff
    var returnValue = callback(match, tagFragment, offset, string, thisTag || lastTag, stack);

    if (shouldPopStack) {
      stack.pop();
    }

    // Don't replace values if the callback didn't explicitly return
    if (typeof returnValue !== 'string') {
      return match;
    }

    return returnValue;
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJodG1sIiwiY2FsbGJhY2siLCJFcnJvciIsInN0YWNrIiwicmVwbGFjZSIsIm1hdGNoIiwidGFnRnJhZ21lbnQiLCJ0YWdOYW1lIiwib2Zmc2V0Iiwic3RyaW5nIiwidGhpc1RhZyIsImxhc3RUYWciLCJsZW5ndGgiLCJzaG91bGRQb3BTdGFjayIsInN0YXRlIiwib3BlbkluZGV4IiwicHVzaCIsImNvbnRlbnRJbmRleCIsImNsb3NlSW5kZXgiLCJjbG9zaW5nSW5kZXgiLCJyZXR1cm5WYWx1ZSIsInBvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2tCQUFlLFVBQUNBLElBQUQsRUFBT0MsUUFBUCxFQUFvQjtBQUNqQyxNQUFJLE9BQU9BLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsVUFBTSxJQUFJQyxLQUFKLENBQVUseUJBQVYsQ0FBTjtBQUNEOztBQUVEO0FBQ0EsTUFBTUMsUUFBUSxFQUFkOztBQUVBO0FBQ0E7QUFDQSxTQUFPSCxLQUFLSSxPQUFMLENBQ0wseUNBREssRUFFTCxVQUFDQyxLQUFELEVBQVFDLFdBQVIsRUFBcUJDLE9BQXJCLEVBQThCQyxNQUE5QixFQUFzQ0MsTUFBdEMsRUFBaUQ7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQUlGLE9BQUosRUFBYTtBQUNYRCxvQkFBY0EsWUFBWUYsT0FBWixDQUFvQkcsT0FBcEIsRUFBNkIsRUFBN0IsQ0FBZDtBQUNEOztBQUVELFFBQUlHLGdCQUFKO0FBQ0EsUUFBTUMsVUFBVVIsTUFBTUEsTUFBTVMsTUFBTixHQUFlLENBQXJCLEtBQTJCLEVBQTNDO0FBQ0EsUUFBSUMsaUJBQWlCLEtBQXJCOztBQUVBO0FBQ0E7QUFDQSxZQUFRUCxXQUFSO0FBQ0UsV0FBSyxHQUFMO0FBQ0EsV0FBSyxNQUFMO0FBQ0U7QUFDQUksa0JBQVU7QUFDUkgsMEJBRFE7QUFFUk8saUJBQU8sTUFGQztBQUdSQyxxQkFBV1A7QUFISCxTQUFWOztBQU1BTCxjQUFNYSxJQUFOLENBQVdOLE9BQVg7QUFDQTs7QUFFRixXQUFLLEdBQUw7QUFDRTtBQUNBLGdCQUFRQyxRQUFRRyxLQUFoQjtBQUNFLGVBQUssTUFBTDtBQUNFSCxvQkFBUU0sWUFBUixHQUF1QlQsTUFBdkI7QUFDQUcsb0JBQVFHLEtBQVIsR0FBZ0IsU0FBaEI7QUFDQTtBQUNGLGVBQUssU0FBTDtBQUNFSCxvQkFBUU8sVUFBUixHQUFxQlYsTUFBckI7QUFDQUssNkJBQWlCLElBQWpCO0FBQ0E7QUFSSjs7QUFXQTs7QUFFRixXQUFLLElBQUw7QUFDQSxXQUFLLEtBQUw7QUFDRTtBQUNBRixnQkFBUU8sVUFBUixHQUFxQlYsTUFBckI7QUFDQUsseUJBQWlCLElBQWpCO0FBQ0E7O0FBRUYsV0FBSyxJQUFMO0FBQ0U7QUFDQUYsZ0JBQVFRLFlBQVIsR0FBdUJYLE1BQXZCO0FBQ0FHLGdCQUFRRyxLQUFSLEdBQWdCLFNBQWhCO0FBQ0E7QUF2Q0o7O0FBMENBO0FBQ0E7QUFDQSxRQUFNTSxjQUFjbkIsU0FDbEJJLEtBRGtCLEVBRWxCQyxXQUZrQixFQUdsQkUsTUFIa0IsRUFJbEJDLE1BSmtCLEVBS2xCQyxXQUFXQyxPQUxPLEVBTWxCUixLQU5rQixDQUFwQjs7QUFTQSxRQUFJVSxjQUFKLEVBQW9CO0FBQ2xCVixZQUFNa0IsR0FBTjtBQUNEOztBQUVEO0FBQ0EsUUFBSSxPQUFPRCxXQUFQLEtBQXVCLFFBQTNCLEVBQXFDO0FBQ25DLGFBQU9mLEtBQVA7QUFDRDs7QUFFRCxXQUFPZSxXQUFQO0FBQ0QsR0FuRkksQ0FBUDtBQXFGRCxDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgKGh0bWwsIGNhbGxiYWNrKSA9PiB7XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgY2FsbGJhY2sgaXMgcmVxdWlyZWQhJyk7XG4gIH1cblxuICAvLyBTdGFjayBmb3Iga2VlcGluZyB0cmFjayBvZiBTR01MIGZyYWdtZW50cyBlbmNvdW50ZXJlZFxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIC8vIFdlIHBpZ2d5YmFjayBvbiBgcmVwbGFjZWAsIHdoaWNoIG1lYW5zIHlvdSBjYW4gd2FsayB0aGUgdHJlZSBhbmQgcmVwbGFjZVxuICAvLyBzdHVmZiB3aXRoaW4gaXQsIGJ1dCB5b3UgZG9uJ3QgaGF2ZSB0byFcbiAgcmV0dXJuIGh0bWwucmVwbGFjZShcbiAgICAvKDwoPzohLS18XFwvPyhbXlxccy8+XSopKXxcXC8+fCg/Oi0tKT8+KS9naSxcbiAgICAobWF0Y2gsIHRhZ0ZyYWdtZW50LCB0YWdOYW1lLCBvZmZzZXQsIHN0cmluZykgPT4ge1xuICAgICAgLy8gVGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgZm9yIGV2ZXJ5IFwidGFnIGZyYWdtZW50XCIgZW5jb3VudGVyZWQuXG4gICAgICAvLyBUaGlzIGRvZXNuJ3QgZ3VhcmFudGVlIHRoZSBTR01MIGlzIHZhbGlkLCBjb21wbGlhbnQsIG9yIGV2ZW4gdXNlZnVsLFxuICAgICAgLy8gYnV0IGl0J3Mgc2ltcGxlIGFuZCBwZXJtaXNzaXZlIGVub3VnaCB0byBsZXQgeW91IGJ1aWxkIHNtYXJ0ZXIgdGhpbmdzXG4gICAgICAvLyBhdG9wIGl0LlxuXG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgdGFnIG5hbWUsIHRoaXMgaXMgYW4gb3BlbmluZyB0YWcgYW5kIHdlIHdhbnQgdG8gc3RyaXAgdGhlXG4gICAgICAvLyBuYW1lIGZyb20gdGhlIGZyYWdtZW50XG4gICAgICBpZiAodGFnTmFtZSkge1xuICAgICAgICB0YWdGcmFnbWVudCA9IHRhZ0ZyYWdtZW50LnJlcGxhY2UodGFnTmFtZSwgJycpO1xuICAgICAgfVxuXG4gICAgICBsZXQgdGhpc1RhZztcbiAgICAgIGNvbnN0IGxhc3RUYWcgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXSB8fCB7fTtcbiAgICAgIGxldCBzaG91bGRQb3BTdGFjayA9IGZhbHNlO1xuXG4gICAgICAvLyBCYXNlZCB1cG9uIHRoZSBmaXJzdCBvbmUgdG8gZm91ciBjaGFyYWN0ZXJzIG9mIHRoZSBtYXRjaCwgd2Uga25vd1xuICAgICAgLy8gY2VydGFpbiBkaWZmZXJlbnQgdGhpbmdzIGFyZSBoYXBwZW5pbmdcbiAgICAgIHN3aXRjaCAodGFnRnJhZ21lbnQpIHtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhc2UgJzwhLS0nOlxuICAgICAgICAgIC8vIEEgdGFnIG9yIGNvbW1lbnQgaXMgb3BlbmluZywgcHVzaCBhbiBvYmplY3Qgb250byB0aGUgdGFnc3RhY2tcbiAgICAgICAgICB0aGlzVGFnID0ge1xuICAgICAgICAgICAgdGFnTmFtZSxcbiAgICAgICAgICAgIHN0YXRlOiAnb3BlbicsXG4gICAgICAgICAgICBvcGVuSW5kZXg6IG9mZnNldFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBzdGFjay5wdXNoKHRoaXNUYWcpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgIC8vIEEgbm9uLXZvaWQgZWxlbWVudCB0YWcgaXMgZWl0aGVyIGJlZ2lubmluZyBjb250ZW50LCBvciBjbG9zaW5nXG4gICAgICAgICAgc3dpdGNoIChsYXN0VGFnLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgICAgICAgbGFzdFRhZy5jb250ZW50SW5kZXggPSBvZmZzZXQ7XG4gICAgICAgICAgICAgIGxhc3RUYWcuc3RhdGUgPSAnY29udGVudCc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY2xvc2luZyc6XG4gICAgICAgICAgICAgIGxhc3RUYWcuY2xvc2VJbmRleCA9IG9mZnNldDtcbiAgICAgICAgICAgICAgc2hvdWxkUG9wU3RhY2sgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICcvPic6XG4gICAgICAgIGNhc2UgJy0tPic6XG4gICAgICAgICAgLy8gQSB2b2lkIGVsZW1lbnQgb3IgY29tbWVudCB0YWcgaXMgY2xvc2luZ1xuICAgICAgICAgIGxhc3RUYWcuY2xvc2VJbmRleCA9IG9mZnNldDtcbiAgICAgICAgICBzaG91bGRQb3BTdGFjayA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnPC8nOlxuICAgICAgICAgIC8vIEEgbm9uLXZvaWQgZWxlbWVudCB0YWcncyBjbG9zaW5nIHRhZyBpcyBiZWdpbm5pbmdcbiAgICAgICAgICBsYXN0VGFnLmNsb3NpbmdJbmRleCA9IG9mZnNldDtcbiAgICAgICAgICBsYXN0VGFnLnN0YXRlID0gJ2Nsb3NpbmcnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBjYWxsIGJhY2ssIHN1cHBseWluZyB0aGUgYXJndW1lbnRzIHN1cHBsZWQgdG8gU3RyaW5nLnJlcGxhY2Unc1xuICAgICAgLy8gY2FsbGJhY2ssIGFzIHdlbGwgYXMgc29tZSBvZiBvdXIgb3duIHN0dWZmXG4gICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IGNhbGxiYWNrKFxuICAgICAgICBtYXRjaCxcbiAgICAgICAgdGFnRnJhZ21lbnQsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgc3RyaW5nLFxuICAgICAgICB0aGlzVGFnIHx8IGxhc3RUYWcsXG4gICAgICAgIHN0YWNrXG4gICAgICApO1xuXG4gICAgICBpZiAoc2hvdWxkUG9wU3RhY2spIHtcbiAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERvbid0IHJlcGxhY2UgdmFsdWVzIGlmIHRoZSBjYWxsYmFjayBkaWRuJ3QgZXhwbGljaXRseSByZXR1cm5cbiAgICAgIGlmICh0eXBlb2YgcmV0dXJuVmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgIH1cbiAgKTtcbn07XG4iXX0=
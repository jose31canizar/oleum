'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _frontMatter2 = require('front-matter');

var _frontMatter3 = _interopRequireDefault(_frontMatter2);

var _hastml = require('hastml');

var _hastml2 = _interopRequireDefault(_hastml);

var _he = require('he');

var _highlight = require('highlight.js');

var _highlight2 = _interopRequireDefault(_highlight);

var _jsxFriendlyMarkdownIt = require('./jsx-friendly-markdown-it');

var _jsxFriendlyMarkdownIt2 = _interopRequireDefault(_jsxFriendlyMarkdownIt);

var _module = require('./formatters/module');

var _module2 = _interopRequireDefault(_module);

var _jsEscape = require('./formatters/js-escape');

var _jsEscape2 = _interopRequireDefault(_jsEscape);

var _stringReplacementCache = require('./string-replacement-cache');

var _stringReplacementCache2 = _interopRequireDefault(_stringReplacementCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var ASSIGNMENT_EXPRESSION_PREFIX = 'mclAssignmentBeginI';
var ASSIGNMENT_EXPRESSION_SUFFIX = 'IEnd';
var ASSIGNMENT_EXPRESSION_REGEXP =
// Assignment Expression IDs are 55 lower-case characters long
ASSIGNMENT_EXPRESSION_PREFIX + '[a-z]{55}' + ASSIGNMENT_EXPRESSION_SUFFIX;
var ASSIGNMENT_EXPRESSION_COMMENT_REGEXP = '{/\\*(' + ASSIGNMENT_EXPRESSION_REGEXP + ')\\*/}';

var IMPLICIT_REACT_IMPORTS = {
  React: 'react',
  PropTypes: 'prop-types'
};

var DEFAULT_CONFIGURATION = {
  implicitlyImportReact: true,
  passElementProps: false,
  markdownItPlugins: []
};

exports.default = function (source, config) {
  // First, we handle the configuration and front-matter

  config = Object.assign({}, DEFAULT_CONFIGURATION, config);

  var invalidStatics = ['propTypes'];

  // Pull out imports & front-matter

  var _frontMatter = (0, _frontMatter3.default)(source),
      markdown = _frontMatter.body,
      _frontMatter$attribut = _frontMatter.attributes,
      customImports = _frontMatter$attribut.imports,
      statics = _objectWithoutProperties(_frontMatter$attribut, ['imports']);

  // Import React and PropTypes unless we've been asked otherwise


  var imports = config.implicitlyImportReact ? _extends({}, IMPLICIT_REACT_IMPORTS, customImports) : customImports;

  // Disallow passing `defaultProps` if we're passing our own
  if (config.passElementProps) {
    invalidStatics.push('defaultProps');
  }

  // Check for invalid statics
  Object.keys(statics).map(function (attribute) {
    if (invalidStatics.indexOf(attribute) !== -1) {
      throw new Error('You can\'t supply a `' + attribute + '` static! That name is reserved.');
    }
  });

  // Now, we start processing the markdown itself

  // Hold onto JSX properties and assignment expressions before converting
  var offsetForPropertyReplacements = 0;
  var markdownSansJsxProperties = markdown;

  var jsxPropertyCache = new _stringReplacementCache2.default(/[\w]+={[^}]*}\s*}?|{\s*\.\.\.[^}]*}/g);

  // Find all opening or void HTML tags
  (0, _hastml2.default)(markdown, function (match, tagFragment, offset, string, tag) {
    // Once we get a tag which is closing
    if (typeof tag.closeIndex === 'number') {
      // Replace any assignment expressions within its opening tag
      var startIndex = tag.openIndex + offsetForPropertyReplacements;
      var endIndex = (typeof tag.contentIndex === 'number' ? tag.contentIndex : tag.closeIndex) + offsetForPropertyReplacements;

      var tagWithNoReplacements = markdownSansJsxProperties.slice(startIndex, endIndex);
      var tagWithPropertyReplacements = jsxPropertyCache.load(tagWithNoReplacements);

      markdownSansJsxProperties = markdownSansJsxProperties.slice(0, startIndex) + tagWithPropertyReplacements + markdownSansJsxProperties.slice(endIndex);

      offsetForPropertyReplacements += tagWithPropertyReplacements.length - tagWithNoReplacements.length;
    }
  });

  // Replace all remaining double-brace assignment expressions with comments
  var assignmentExpressionCache = new _stringReplacementCache2.default(/{({\s*(?:<.*?>|.*?)\s*})}/g, function (match, value) {
    return value;
  }, function (identityHash) {
    return '' + ASSIGNMENT_EXPRESSION_PREFIX + identityHash + ASSIGNMENT_EXPRESSION_SUFFIX;
  });

  var markdownSansAssignments = assignmentExpressionCache.load(markdownSansJsxProperties);

  // Configure Markdown renderer, highlight code snippets, and post-process
  var renderer = new _jsxFriendlyMarkdownIt2.default().configure('commonmark').enable(['smartquotes']).set({
    // We need explicit line breaks
    breaks: true,
    typographer: config.typographer,
    highlight: function highlight(code, languageHint) {
      var highlightedContent = void 0;

      _highlight2.default.configure({ tabReplace: '  ' });

      // Try highlighting with a given hint
      if (languageHint && _highlight2.default.getLanguage(languageHint)) {
        try {
          highlightedContent = _highlight2.default.highlight(languageHint, code).value;
        } catch (err) {} // eslint-disable-line no-empty
      }

      // Highlight without a hint
      if (!highlightedContent) {
        try {
          highlightedContent = _highlight2.default.highlightAuto(code).value;
        } catch (err) {} // eslint-disable-line no-empty
      }

      return highlightedContent.replace(/\n/g, '<br />');
    }
  });

  // Load MarkdownIt plugins
  if (config.markdownItPlugins && Array.isArray(config.markdownItPlugins)) {
    renderer = config.markdownItPlugins.reduce(function (markdownRenderer, pluginDefinition) {
      if (!Array.isArray(pluginDefinition)) {
        pluginDefinition = [pluginDefinition];
      }
      if (typeof pluginDefinition[0] === 'string') {
        pluginDefinition[0] = require(pluginDefinition[0]);
      }
      return markdownRenderer.use.apply(markdownRenderer, _toConsumableArray(pluginDefinition));
    }, renderer);
  }

  // Render markdown to HTML, and replace assignment expressions with comments
  var html = (renderer.render(markdownSansAssignments) || '<!-- no input given -->').replace(new RegExp(ASSIGNMENT_EXPRESSION_REGEXP, 'g'), '<!--$&-->');

  // Collect all the HTML tags and their positions
  var htmlOffsets = [0];

  (0, _hastml2.default)(html, function (match, tagFragment, offset) {
    if (tagFragment[0] === '<') {
      // Push the offset of opening tags...
      htmlOffsets.push(offset);
    } else {
      // âˆ´ tagFragment[tagFragment.length - 1] === '>'
      // ...and the end offset of closing tags
      htmlOffsets.push(offset + tagFragment.length);
    }
  });

  // Here, we collect all the positions at which HTML tags begin or end
  var jsx = htmlOffsets.map(function (offset, index, array) {
    var fragment = html.slice(offset, array[index + 1]);

    // Then we check, for each of them, whether they are a tag or a text node
    if (fragment[0] === '<' || fragment[fragment.length - 1] === '>') {
      // If they're tags, we check whether they're a comment,
      if (fragment.slice(0, 4) === '<!--') {
        // and replace them with JSX style comments
        return '{/*' + fragment.slice(4, -3) + '*/}';
      } else {
        // otherwise, we will...
        if (fragment[1] !== '/') {
          // ...replace `class` properties with `className` for React compatibility
          fragment = fragment.replace(/(\sclass)(=)/, '$1Name$2');

          // and, if we've been asked to, add the `elementProps` pass-through.
          if (config.passElementProps) {
            var tagName = fragment.slice(1, fragment.search(/[\s\n]/));

            return fragment.replace(/(\s*\/?>)/, ' {...elementProps[' + (0, _jsEscape2.default)(tagName) + ']}$1');
          }
        }
      }
    } else {
      // If they're not tags, they're a text node. We split on newlines, and...
      return fragment.split(/\n/g).map(function (line) {
        // ...wrap string lines containing curly braces

        if (line.indexOf('{') !== -1 || line.indexOf('}') !== -1) {
          return '{' + (0, _jsEscape2.default)((0, _he.decode)(line)) + '}';
        }

        return line;
      }).join('\n');
    }

    // fall back to returning input
    return fragment;
  })
  // Put it all back together,
  .join('')
  // Restore assignment expressions to their original form
  .replace(new RegExp(ASSIGNMENT_EXPRESSION_COMMENT_REGEXP, 'g'), '$1')
  // Indent for pretty inspector output ðŸŽ‰
  .replace(/\n/g, '\n          ')
  // And remove the trailing blank line
  .replace(/\n\s*$/g, '');

  // Unload caches so we've got our values back!
  jsx = jsxPropertyCache.unload(assignmentExpressionCache.unload(jsx));

  return (0, _module2.default)(imports, statics, jsx, config);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
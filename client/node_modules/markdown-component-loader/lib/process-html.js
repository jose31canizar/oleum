'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (html, callback) {
  if (typeof callback !== 'function') {
    throw new Error('A callback is required!');
  }

  // Stack for keeping track of SGML fragments encountered
  var stack = [];

  // We piggyback on `replace`, which means you can walk the tree and replace
  // stuff within it, but you don't have to!
  return html.replace(/(<(?:!--|\/?([^\s/>]*))|\/>|(?:--)?>)/gi, function (match, tagFragment, tagName, offset, string) {
    // This callback is called for every "tag fragment" encountered.
    // This doesn't guarantee the SGML is valid, compliant, or even useful,
    // but it's simple and permissive enough to let you build smarter things
    // atop it.

    // If we have a tag name, this is an opening tag and we want to strip the
    // name from the fragment
    if (tagName) {
      tagFragment = tagFragment.replace(tagName, '');
    }

    var thisTag = void 0;
    var lastTag = stack[stack.length - 1] || {};
    var shouldPopStack = false;

    // Based upon the first one to four characters of the match, we know
    // certain different things are happening
    switch (tagFragment) {
      case '<':
      case '<!--':
        // A tag or comment is opening, push an object onto the tagstack
        thisTag = {
          tagName: tagName,
          state: 'open',
          openIndex: offset
        };

        stack.push(thisTag);
        break;

      case '>':
        // A non-void element tag is either beginning content, or closing
        switch (lastTag.state) {
          case 'open':
            lastTag.contentIndex = offset;
            lastTag.state = 'content';
            break;
          case 'closing':
            lastTag.closeIndex = offset;
            shouldPopStack = true;
            break;
        }

        break;

      case '/>':
      case '-->':
        // A void element or comment tag is closing
        lastTag.closeIndex = offset;
        shouldPopStack = true;
        break;

      case '</':
        // A non-void element tag's closing tag is beginning
        lastTag.closingIndex = offset;
        lastTag.state = 'closing';
        break;
    }

    // We call back, supplying the arguments suppled to String.replace's
    // callback, as well as some of our own stuff
    var returnValue = callback(match, tagFragment, offset, string, thisTag || lastTag, stack);

    if (shouldPopStack) {
      stack.pop();
    }

    // Don't replace values if the callback didn't explicitly return
    if (typeof returnValue !== 'string') {
      return match;
    }

    return returnValue;
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9jZXNzLWh0bWwuanMiXSwibmFtZXMiOlsiaHRtbCIsImNhbGxiYWNrIiwiRXJyb3IiLCJzdGFjayIsInJlcGxhY2UiLCJtYXRjaCIsInRhZ0ZyYWdtZW50IiwidGFnTmFtZSIsIm9mZnNldCIsInN0cmluZyIsInRoaXNUYWciLCJsYXN0VGFnIiwibGVuZ3RoIiwic2hvdWxkUG9wU3RhY2siLCJzdGF0ZSIsIm9wZW5JbmRleCIsInB1c2giLCJjb250ZW50SW5kZXgiLCJjbG9zZUluZGV4IiwiY2xvc2luZ0luZGV4IiwicmV0dXJuVmFsdWUiLCJwb3AiXSwibWFwcGluZ3MiOiI7Ozs7OztrQkFBZSxVQUFDQSxJQUFELEVBQU9DLFFBQVAsRUFBb0I7QUFDakMsTUFBSSxPQUFPQSxRQUFQLEtBQW9CLFVBQXhCLEVBQW9DO0FBQ2xDLFVBQU0sSUFBSUMsS0FBSixDQUFVLHlCQUFWLENBQU47QUFDRDs7QUFFRDtBQUNBLE1BQU1DLFFBQVEsRUFBZDs7QUFFQTtBQUNBO0FBQ0EsU0FBT0gsS0FBS0ksT0FBTCxDQUNMLHlDQURLLEVBRUwsVUFBQ0MsS0FBRCxFQUFRQyxXQUFSLEVBQXFCQyxPQUFyQixFQUE4QkMsTUFBOUIsRUFBc0NDLE1BQXRDLEVBQWlEO0FBQy9DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFJRixPQUFKLEVBQWE7QUFDWEQsb0JBQWNBLFlBQVlGLE9BQVosQ0FBb0JHLE9BQXBCLEVBQTZCLEVBQTdCLENBQWQ7QUFDRDs7QUFFRCxRQUFJRyxnQkFBSjtBQUNBLFFBQU1DLFVBQVVSLE1BQU1BLE1BQU1TLE1BQU4sR0FBZSxDQUFyQixLQUEyQixFQUEzQztBQUNBLFFBQUlDLGlCQUFpQixLQUFyQjs7QUFFQTtBQUNBO0FBQ0EsWUFBUVAsV0FBUjtBQUNFLFdBQUssR0FBTDtBQUNBLFdBQUssTUFBTDtBQUNFO0FBQ0FJLGtCQUFVO0FBQ1JILDBCQURRO0FBRVJPLGlCQUFPLE1BRkM7QUFHUkMscUJBQVdQO0FBSEgsU0FBVjs7QUFNQUwsY0FBTWEsSUFBTixDQUFXTixPQUFYO0FBQ0E7O0FBRUYsV0FBSyxHQUFMO0FBQ0U7QUFDQSxnQkFBUUMsUUFBUUcsS0FBaEI7QUFDRSxlQUFLLE1BQUw7QUFDRUgsb0JBQVFNLFlBQVIsR0FBdUJULE1BQXZCO0FBQ0FHLG9CQUFRRyxLQUFSLEdBQWdCLFNBQWhCO0FBQ0E7QUFDRixlQUFLLFNBQUw7QUFDRUgsb0JBQVFPLFVBQVIsR0FBcUJWLE1BQXJCO0FBQ0FLLDZCQUFpQixJQUFqQjtBQUNBO0FBUko7O0FBV0E7O0FBRUYsV0FBSyxJQUFMO0FBQ0EsV0FBSyxLQUFMO0FBQ0U7QUFDQUYsZ0JBQVFPLFVBQVIsR0FBcUJWLE1BQXJCO0FBQ0FLLHlCQUFpQixJQUFqQjtBQUNBOztBQUVGLFdBQUssSUFBTDtBQUNFO0FBQ0FGLGdCQUFRUSxZQUFSLEdBQXVCWCxNQUF2QjtBQUNBRyxnQkFBUUcsS0FBUixHQUFnQixTQUFoQjtBQUNBO0FBdkNKOztBQTBDQTtBQUNBO0FBQ0EsUUFBTU0sY0FBY25CLFNBQ2xCSSxLQURrQixFQUVsQkMsV0FGa0IsRUFHbEJFLE1BSGtCLEVBSWxCQyxNQUprQixFQUtsQkMsV0FBV0MsT0FMTyxFQU1sQlIsS0FOa0IsQ0FBcEI7O0FBU0EsUUFBSVUsY0FBSixFQUFvQjtBQUNsQlYsWUFBTWtCLEdBQU47QUFDRDs7QUFFRDtBQUNBLFFBQUksT0FBT0QsV0FBUCxLQUF1QixRQUEzQixFQUFxQztBQUNuQyxhQUFPZixLQUFQO0FBQ0Q7O0FBRUQsV0FBT2UsV0FBUDtBQUNELEdBbkZJLENBQVA7QUFxRkQsQyIsImZpbGUiOiJwcm9jZXNzLWh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoaHRtbCwgY2FsbGJhY2spID0+IHtcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQSBjYWxsYmFjayBpcyByZXF1aXJlZCEnKTtcbiAgfVxuXG4gIC8vIFN0YWNrIGZvciBrZWVwaW5nIHRyYWNrIG9mIFNHTUwgZnJhZ21lbnRzIGVuY291bnRlcmVkXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgLy8gV2UgcGlnZ3liYWNrIG9uIGByZXBsYWNlYCwgd2hpY2ggbWVhbnMgeW91IGNhbiB3YWxrIHRoZSB0cmVlIGFuZCByZXBsYWNlXG4gIC8vIHN0dWZmIHdpdGhpbiBpdCwgYnV0IHlvdSBkb24ndCBoYXZlIHRvIVxuICByZXR1cm4gaHRtbC5yZXBsYWNlKFxuICAgIC8oPCg/OiEtLXxcXC8/KFteXFxzLz5dKikpfFxcLz58KD86LS0pPz4pL2dpLFxuICAgIChtYXRjaCwgdGFnRnJhZ21lbnQsIHRhZ05hbWUsIG9mZnNldCwgc3RyaW5nKSA9PiB7XG4gICAgICAvLyBUaGlzIGNhbGxiYWNrIGlzIGNhbGxlZCBmb3IgZXZlcnkgXCJ0YWcgZnJhZ21lbnRcIiBlbmNvdW50ZXJlZC5cbiAgICAgIC8vIFRoaXMgZG9lc24ndCBndWFyYW50ZWUgdGhlIFNHTUwgaXMgdmFsaWQsIGNvbXBsaWFudCwgb3IgZXZlbiB1c2VmdWwsXG4gICAgICAvLyBidXQgaXQncyBzaW1wbGUgYW5kIHBlcm1pc3NpdmUgZW5vdWdoIHRvIGxldCB5b3UgYnVpbGQgc21hcnRlciB0aGluZ3NcbiAgICAgIC8vIGF0b3AgaXQuXG5cbiAgICAgIC8vIElmIHdlIGhhdmUgYSB0YWcgbmFtZSwgdGhpcyBpcyBhbiBvcGVuaW5nIHRhZyBhbmQgd2Ugd2FudCB0byBzdHJpcCB0aGVcbiAgICAgIC8vIG5hbWUgZnJvbSB0aGUgZnJhZ21lbnRcbiAgICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICAgIHRhZ0ZyYWdtZW50ID0gdGFnRnJhZ21lbnQucmVwbGFjZSh0YWdOYW1lLCAnJyk7XG4gICAgICB9XG5cbiAgICAgIGxldCB0aGlzVGFnO1xuICAgICAgY29uc3QgbGFzdFRhZyA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdIHx8IHt9O1xuICAgICAgbGV0IHNob3VsZFBvcFN0YWNrID0gZmFsc2U7XG5cbiAgICAgIC8vIEJhc2VkIHVwb24gdGhlIGZpcnN0IG9uZSB0byBmb3VyIGNoYXJhY3RlcnMgb2YgdGhlIG1hdGNoLCB3ZSBrbm93XG4gICAgICAvLyBjZXJ0YWluIGRpZmZlcmVudCB0aGluZ3MgYXJlIGhhcHBlbmluZ1xuICAgICAgc3dpdGNoICh0YWdGcmFnbWVudCkge1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FzZSAnPCEtLSc6XG4gICAgICAgICAgLy8gQSB0YWcgb3IgY29tbWVudCBpcyBvcGVuaW5nLCBwdXNoIGFuIG9iamVjdCBvbnRvIHRoZSB0YWdzdGFja1xuICAgICAgICAgIHRoaXNUYWcgPSB7XG4gICAgICAgICAgICB0YWdOYW1lLFxuICAgICAgICAgICAgc3RhdGU6ICdvcGVuJyxcbiAgICAgICAgICAgIG9wZW5JbmRleDogb2Zmc2V0XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHN0YWNrLnB1c2godGhpc1RhZyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgLy8gQSBub24tdm9pZCBlbGVtZW50IHRhZyBpcyBlaXRoZXIgYmVnaW5uaW5nIGNvbnRlbnQsIG9yIGNsb3NpbmdcbiAgICAgICAgICBzd2l0Y2ggKGxhc3RUYWcuc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29wZW4nOlxuICAgICAgICAgICAgICBsYXN0VGFnLmNvbnRlbnRJbmRleCA9IG9mZnNldDtcbiAgICAgICAgICAgICAgbGFzdFRhZy5zdGF0ZSA9ICdjb250ZW50JztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjbG9zaW5nJzpcbiAgICAgICAgICAgICAgbGFzdFRhZy5jbG9zZUluZGV4ID0gb2Zmc2V0O1xuICAgICAgICAgICAgICBzaG91bGRQb3BTdGFjayA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJy8+JzpcbiAgICAgICAgY2FzZSAnLS0+JzpcbiAgICAgICAgICAvLyBBIHZvaWQgZWxlbWVudCBvciBjb21tZW50IHRhZyBpcyBjbG9zaW5nXG4gICAgICAgICAgbGFzdFRhZy5jbG9zZUluZGV4ID0gb2Zmc2V0O1xuICAgICAgICAgIHNob3VsZFBvcFN0YWNrID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICc8Lyc6XG4gICAgICAgICAgLy8gQSBub24tdm9pZCBlbGVtZW50IHRhZydzIGNsb3NpbmcgdGFnIGlzIGJlZ2lubmluZ1xuICAgICAgICAgIGxhc3RUYWcuY2xvc2luZ0luZGV4ID0gb2Zmc2V0O1xuICAgICAgICAgIGxhc3RUYWcuc3RhdGUgPSAnY2xvc2luZyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGNhbGwgYmFjaywgc3VwcGx5aW5nIHRoZSBhcmd1bWVudHMgc3VwcGxlZCB0byBTdHJpbmcucmVwbGFjZSdzXG4gICAgICAvLyBjYWxsYmFjaywgYXMgd2VsbCBhcyBzb21lIG9mIG91ciBvd24gc3R1ZmZcbiAgICAgIGNvbnN0IHJldHVyblZhbHVlID0gY2FsbGJhY2soXG4gICAgICAgIG1hdGNoLFxuICAgICAgICB0YWdGcmFnbWVudCxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBzdHJpbmcsXG4gICAgICAgIHRoaXNUYWcgfHwgbGFzdFRhZyxcbiAgICAgICAgc3RhY2tcbiAgICAgICk7XG5cbiAgICAgIGlmIChzaG91bGRQb3BTdGFjaykge1xuICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgIH1cblxuICAgICAgLy8gRG9uJ3QgcmVwbGFjZSB2YWx1ZXMgaWYgdGhlIGNhbGxiYWNrIGRpZG4ndCBleHBsaWNpdGx5IHJldHVyblxuICAgICAgaWYgKHR5cGVvZiByZXR1cm5WYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfVxuICApO1xufTtcbiJdfQ==